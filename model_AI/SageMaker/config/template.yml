AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  CloudFormation template for ComfyUI on Amazon SageMaker with cost-effective single-instance strategy

Parameters:
  AppName:
    Type: String
    Description: Application name prefix for resources provisioned
    Default: comfyui
  DeploymentBucket:
    Type: String
    Description: Bucket name of deployment files
    Default: comfyui-on-sagemaker
  LambdaPackageS3Key:
    Type: String
    Description: S3 object key of Lambda function package
    Default: lambda.zip
  ModelVersion:
    Type: String
    Description: Suffix for SageMaker model and endpoint config
    Default: default
  ModelDataS3Key:
    Type: String
    Description: S3 object key of model data
    Default: model-data-comfyui-default.tgz
  ModelEcrImage:
    Type: String
    Description: Image location where the code image is stored in Amazon ECR
    Default: comfyui-inference:default
  SageMakerInstanceType:
    Type: String
    Description: Instance type of SageMaker endpoint
    Default: ml.g4dn.xlarge
  LambdaUrlAuthType:
    Type: String
    Description: Authentication type for the Lambda URL
    AllowedValues:
      - NONE
      - AWS_IAM
    Default: AWS_IAM

Conditions:
  LambdaUrlAuthTypeIsNone: !Equals
    - !Ref LambdaUrlAuthType
    - NONE

Resources:
  ComfyUIModelExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AppName}-sagemaker-model-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess

  ComfyUIModel:
    Type: "AWS::SageMaker::Model"
    Properties:
      EnableNetworkIsolation: true
      ExecutionRoleArn: !GetAtt ComfyUIModelExecutionRole.Arn
      ModelName: !Sub "${AppName}-${ModelVersion}"
      PrimaryContainer:
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ModelEcrImage}"
        ModelDataUrl: !Sub s3://${DeploymentBucket}/${ModelDataS3Key}

  ComfyUIEndpointConfig:
    Type: "AWS::SageMaker::EndpointConfig"
    Properties:
      EndpointConfigName: !Sub "${AppName}-${ModelVersion}"
      ProductionVariants:
        - VariantName: !Sub "${AppName}-${ModelVersion}"
          ModelName: !GetAtt ComfyUIModel.ModelName
          ContainerStartupHealthCheckTimeoutInSeconds: 600
          InitialInstanceCount: 1
          InstanceType: !Ref SageMakerInstanceType
          RoutingConfig:
            RoutingStrategy: LEAST_OUTSTANDING_REQUESTS

  ComfyUIEndpoint:
    Type: "AWS::SageMaker::Endpoint"
    Properties:
      EndpointName: !Sub "${AppName}"
      EndpointConfigName: !GetAtt ComfyUIEndpointConfig.EndpointConfigName

  ComfyUIFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AppName}-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${AppName}-lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sagemaker:InvokeEndpoint
                Resource: !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/${AppName}"

  ComfyUIFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${AppName}-lambda"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ComfyUIFunctionRole.Arn
      Runtime: python3.12
      MemorySize: 256
      Timeout: 120
      Architectures:
        - arm64
      Code:
        S3Bucket: !Sub "${DeploymentBucket}"
        S3Key: !Sub "${LambdaPackageS3Key}"
      Environment:
        Variables:
          ENDPOINT_NAME: !GetAtt ComfyUIEndpoint.EndpointName
  ComfyUIFunctionUrl:
    Type: "AWS::Lambda::Url"
    Properties:
      AuthType: !If [LambdaUrlAuthTypeIsNone, "NONE", "AWS_IAM"]
      InvokeMode: BUFFERED
      TargetFunctionArn: !GetAtt ComfyUIFunction.Arn

  ComfyUIFunctionUrlPermission:
    Type: "AWS::Lambda::Permission"
    Condition: LambdaUrlAuthTypeIsNone
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName: !Ref ComfyUIFunction
      FunctionUrlAuthType: "NONE"
      Principal: "*"

Outputs:
  ComfyUIFunctionUrl:
    Description: Function URL of Lambda function
    Value: !GetAtt ComfyUIFunctionUrl.FunctionUrl
  ComfyUIEndpoint:
    Description: Name of SageMaker inference endpoint
    Value: !Ref ComfyUIEndpoint